#summary Cookbook
#sidebar TableOfContents

= Content =
<wiki:toc max_depth="2" />

= Copula =
Copula is a function to couple two CDFs. The library is called using
{{{
ambhas.copula
}}}
The library has three copulas namely Clayton, Frank and Gumbel.

== Estimate parameters of copula from the measured data ==

{{{
# import the required libraries
import numpy as np
from ambhas.copula import Copula  
import matplotlib.pyplot as plt

# generate some pseudo observations
x = np.random.uniform(size=(100))
y = np.log(x) + 0.5*np.random.normal(size=(100))

# use the copula
foo = Copula(x, y, 'clayton')
foo.tau

# generate ensemble using copula
x1,y1 = foo.generate_xy()

# plot the ensemble along with observations
plt.figure(figsize=(6, 4.5))
plt.scatter(x1,y1, color='g', label='Generated ensemble')  
plt.scatter(x,y, color='r', label='Observations')  
plt.xlabel('x')  
plt.ylabel('y')
plt.legend(loc='best')
plt.savefig('/home/tomer/svn/ambhas-wiki/images/copula.png')  

}}}

http://ambhas.googlecode.com/svn/wiki/images/copula.png

In the similar way 'frank' and 'gumbel' copula can also be used.

= csglm =
    CSGLM (Coupled Surface-Ground water Lumped Model) is a model developed for modelling linkage between surface and groundwater.

= easy_gw_1d =
This is an easy implementation of the one dimensional groundwater model. This data is pass to the module using the xls file and the output is also written in xls. You need not to know Python for using this module.

= errlib =
This provides some simple error indices e.g. rmse, bias, NS coefficient etc.

= extract gis data =
Useful for extracting data over few locations from multiple gis file.

= gis =
Some GIS tool e.g. conversion of coordinate system from latlong to UTM.

= gw =
Groundwater model.

= krige =
Variogram and Kriging analysis.

= radarsat =
Process RADARSAT-2 data.

= rain_disagg =
Rainfall disaggregation model based on the random multiplicative cascade (RMC) approach.

= richards =
This module provides the numerical solution of Richards' equation in python. The description about Richards' equation can be found in [http://en.wikipedia.org/wiki/Richards_equation]. 

This module reads the input from a xls file, run the module and write the output into netcdf format. The example xls file is given in the examples subdirectory by the name maddur.xls. Lets first plot the rainfall and PET from the input file.
{{{
import matplotlib.pyplot as plt
from ambhas.xls import xlsread

in_file = 'maddur.xls'
xls_file = xlsread(in_file)
doy = xls_file.get_cells('B2:B366','forcing')
rain = xls_file.get_cells('C2:C366','forcing')
pet = xls_file.get_cells('D2:D366','forcing')

plt.clf()
plt.bar(doy,rain, color='m', edgecolor='m', label='Rainfall')
plt.plot(pet, label='PET')
plt.grid(True)
plt.legend()
plt.xlabel('DOY')
plt.ylabel('mm')
plt.savefig('output/richards_forcing.png')
}}}

The resulted graph is:

http://ambhas.googlecode.com/svn/wiki/images/richards_forcing.png


Now lets run the model. The input to the model is given via input xls file. A sample input xls file is provided in the examples directory. 
{{{
from ambhas.richards import RICHARDS_1D 
import matplotlib.pyplot as plt
from scipy.io import netcdf as nc

# change the default font size of matplotlib
params = {'axes.labelsize': 15, 
          'text.fontsize': 15,
          'legend.fontsize': 15,
          'xtick.labelsize': 15,
          'ytick.labelsize': 15,
          'text.usetex': False}
plt.rcParams.update(params)

# run the model
maddur = RICHARDS_1D('/home/tomer/svn/ambhas/examples/maddur.xls')

# read the output
output_file = nc.NetCDFFile(maddur.ofile_name, 'r')
theta = output_file.variables['sm'][:]
doy = range(1,367)
rain = output_file.variables['rain'][:]

# main plot
plt.close()
fig = plt.figure()
ax = plt.axes([0.125, 0.15, 0.75, 0.6])
ax.plot(doy,theta[0,:],'b')
ax.plot(doy,theta[20,:],'g')
ax.plot(doy,theta[39,:],'c')
ax.set_ylabel('Soil Moisture (v/v)')
ax.set_ylim(ymax=0.4)
ax.set_xlim(xmax=366)
ax.set_xlabel('DOY')
fig.canvas.draw()
	
# precipitation plot
ax2 = plt.twinx()
ax2.bar(doy,rain*86400*1000, label='Precipitation', color='m', edgecolor='m')
ax2.set_ylabel('Precipitation (mm)')
ax2.set_ylim(ymax=100)
ax2.set_xlim(xmax=366)
ax2.invert_yaxis()

p1 = plt.Rectangle((0, 0), 1, 1, fc="m")
p2 = plt.Rectangle((0, 0), 1, 1, fc="b")
p3 = plt.Rectangle((0, 0), 1, 1, fc="g")
p4 = plt.Rectangle((0, 0), 1, 1, fc="c")
leg = plt.legend([p1,p2,p3,p4], ["Precipitation","SM at surface", "SM at 1m", "SM at 2m"], loc=(0.01,0.4))
frame = leg.get_frame()
frame.set_alpha(0.5)

plt.savefig('/home/tomer/svn/ambhas-wiki/images/run_richards.png')

}}} 
The resulted graph is:

http://ambhas.googlecode.com/svn/wiki/images/run_richards.png


= soil_texture =
Provides the soil type and soil hydraulic properties based on pedotransfer function given the percentage of sand, silt and clay.

= stats =
Some statistical functions

= sunlib =
Modules to compute sunrise, sunset time etc.

= xls =
Read and write data to xls files.